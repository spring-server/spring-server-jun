plugins {
    id("org.sonarqube") version("4.2.1.3168")
    id("jacoco")
}

dependencies {
    implementation(project(":mvc"))
    implementation(project(":jdbc"))

    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.1")
    runtimeOnly("com.mysql:mysql-connector-j:8.1.0")
}

tasks.named("test") {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = project.getProperty("jacocoVersion")
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        xml.destination file("${buildDir}/jacoco/index.xml")
        csv.destination file("${buildDir}/jacoco/index.csv")
        html.destination file("${buildDir}/jacoco/index.html")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [])
                })
        )
    }
    finalizedBy("jacocoTestCoverageVerification")
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"
            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = 0.50
            }
        }
    }
}

sonarqube {
    properties {
        property("sonar.host.url", System.getenv("SONAR_QUBE_SERVER_URL"))
        property("sonar.login", System.getenv("SONAR_QUBE_TOKEN"))
        property("sonar.sources", "src/main/java")
        property("sonar.tests", "src/test/java")
        property("sonar.language", "java")
        property("sonar.projectKey", System.getenv("SONAR_PROJECT_KEY"))
        property("sonar.projectName", System.getenv("SONAR_PROJECT_NAME"))
        property("sonar.java.source", 17)
        property("sonar.sourceEncoding", "UTF-8")
        property("sonar.java.binaries", "${buildDir}/classes")
        property("sonar.test.inclusions", "")
        property("sonar.exclusions", "")
        property("sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/jacoco/index.xml")
    }
}

task downloadYml {
    doLast {
        def url = new URL(System.getenv("YML_URL"))
        def connection = url.openConnection()

        def file = new File(projectDir, "./src/main/resources/application.yml")
        if (!file.parentFile.exists()) {
            file.parentFile.mkdirs()
        }

        connection.inputStream.withStream { inputStream ->
            file.withOutputStream { outputStream ->
                inputStream.transferTo(outputStream)
            }
        }
    }
}

tasks.named("downloadYml") {
    dependsOn downloadYml
}
